#[derive(Clone,Debug)]
#[allow(dead_code)]
pub enum LlvmIr {
    Ret,
    Br,
    IndirectBr,
    Switch,
    _Unreachable,//dunno
    _Invoke,//dunno
    Call,
    PHI,
    Select,
    VAArg,
    Add,
    Sub,
    Mul,
    UDiv,
    SDiv,
    URem,
    SRem,
    And,
    Or,
    Xor,
    Shl,
    LShr,
    AShr,
    ICmp,
    Alloca,
    Load,
    Store,
    GetElementPtr,
    Trunc,
    ZExt,
    SExt,
    IntToPtr,
    PtrToInt,
    BitCast,
    FNeg,
    FAdd,
    FSub,
    FMul,
    FDiv,
    FRem,
    FPTrunc,
    FPExt,
    FPToUI,
    FPToSI,
    UIToFP,
    SIToFP,
    FCmp,
    InsertValue,
    ExtractValue,
    Fence,
    InsertElement,
    ExtractElement,
    ShuffleVector,
    AtomicRMW,//borde crasha
    AtomicCmpXchg,//borde crasha
}

#[allow(dead_code)]
impl LlvmIr {
    pub fn from_string(s: &str) -> Option<LlvmIr> {
        match s {
            "Ret" => Some(LlvmIr::Ret),
            "Br" => Some(LlvmIr::Br),
            "IndirectBr" => Some(LlvmIr::IndirectBr),
            "Swith" => Some(LlvmIr::Switch),
            "Call" => Some(LlvmIr::Call),
            "PHI" => Some(LlvmIr::PHI),
            "Select" => Some(LlvmIr::Select),
            "VAArg" => Some(LlvmIr::VAArg),
            "Add" => Some(LlvmIr::Add),
            "Sub" => Some(LlvmIr::Sub),
            "Mul" => Some(LlvmIr::Mul),
            "UDiv" => Some(LlvmIr::UDiv),
            "SDiv" => Some(LlvmIr::SDiv),
            "URem" => Some(LlvmIr::URem),
            "SRem" => Some(LlvmIr::SRem),
            "And" => Some(LlvmIr::And),
            "Or" => Some(LlvmIr::Or),
            "Xor" => Some(LlvmIr::Xor),
            "Shl" => Some(LlvmIr::Shl),
            "LShr" => Some(LlvmIr::LShr),
            "Ashr" => Some(LlvmIr::AShr),
            "ICmp" => Some(LlvmIr::ICmp),
            "Alloca" => Some(LlvmIr::Alloca),
            "Load" => Some(LlvmIr::Load),
            "Store" => Some(LlvmIr::Store),
            "GetElementPtr" => Some(LlvmIr::GetElementPtr),
            "Trunc" => Some(LlvmIr::Trunc),
            "ZExt" => Some(LlvmIr::ZExt),
            "SExt" => Some(LlvmIr::SExt),
            "IntToPtr" => Some(LlvmIr::IntToPtr),
            "PtrToInt" => Some(LlvmIr::PtrToInt),
            "BitCast" => Some(LlvmIr::BitCast),
            "FNeq" => Some(LlvmIr::FNeg),
            "FAdd" => Some(LlvmIr::FAdd),
            "FSub" => Some(LlvmIr::FSub),
            "FMul" => Some(LlvmIr::FMul),
            "FDiv" => Some(LlvmIr::FDiv),
            "FRem" => Some(LlvmIr::FRem),
            "FPTrunc" => Some(LlvmIr::FPTrunc),
            "FPExt" => Some(LlvmIr::FPExt),
            "FPToUI" => Some(LlvmIr::FPToUI),
            "FPToSI" => Some(LlvmIr::FPToSI),
            "UIToFP" => Some(LlvmIr::UIToFP),
            "SIToFP" => Some(LlvmIr::SIToFP),
            "FCmp" => Some(LlvmIr::FCmp),
            "InsertValue" => Some(LlvmIr::InsertValue),
            "ExtractValue" => Some(LlvmIr::ExtractValue),
            "Fence" => Some(LlvmIr::Fence),
            "InsertElement" => Some(LlvmIr::InsertElement),
            "ExtractElement" => Some(LlvmIr::ExtractElement),
            "ShuffleVector" => Some(LlvmIr::ShuffleVector),
            "AtomicRMW" => Some(LlvmIr::AtomicRMW),
            "AtomicCmpXchg" => Some(LlvmIr::AtomicCmpXchg),
            _ => None,
        }
    }
}